"""
    Created by tareq on 9/4/18
"""

__author__ = "Tareq"


def smart_bulk_create(model, object_list, batch_size=None):
    """
    smart_bulk_create method ignores errors in on or more entries in the object list and make sure "non-error" entries
    are saved in the database. This method uses bipartite principal to minimize the number of database queries required
    to save all the "non-error" objects in batches. It returns the number of successfully saved entries and a list of
    errors generated by erroneous objects.

    :param model: Model class. (This class must contain model manager as "objects" property)
    :param object_list: list of "model" type objects
    :param batch_size: maximum number of objects to be saved in a single query.
    :return: a tuple: number of successfully saved objects, a list of tuples (object with error, corresponding error)
    """

    obj_len = len(object_list)
    valid_batch_size = batch_size or obj_len

    try:
        # attempting to save all objects in batch
        model.objects.bulk_create(object_list, batch_size=valid_batch_size)

        # if code is reached here, no error occurred. So, all objects have been saved successfully with zero error
        return obj_len, []  # successfully created objects count=obj_len, errors=0

    except Exception as exp:
        # As exception occurred during bulk create, at least one object contains error.

        if obj_len == 1:
            # As, there is only one object in the list, this object contains error.
            return 0, [(object_list[0], exp)]   # successfully created objects count=0 in this case

        # Now we shall divide the list in equal halves and will attempt to save them separately
        created_in_first_half, first_half_errors = smart_bulk_create(model, object_list[:obj_len // 2], batch_size)
        created_in_second_half, second_half_errors = smart_bulk_create(model, object_list[obj_len // 2:], batch_size)

        # Now merge the result of two parts
        return (created_in_first_half + created_in_second_half), list(first_half_errors + second_half_errors)
